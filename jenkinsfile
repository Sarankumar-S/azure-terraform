pipeline {

    agent any
    
    environment {
        AZ_Subscription_ID     = credentials('AZ_Subscription_ID')
        AZ_Client_ID           = credentials('AZ_Client_ID')
        AZ_Client_Secret       = credentials('AZ_Client_Secret')
        AZ_Tenant_ID           = credentials('AZ_Tenant_ID')       

    }

    stages {

        stage("Backend") {
            steps {
                // Clean before build
                cleanWs()
                checkout scm
                dir("$env.WORKSPACE/$env.BACKEND_DIR") {
                    sh """
                        npm install &&     
                        zip -r ${env.BACKEND_DIR}-${env.BUILD_NUMBER}.zip .
                    """
                        // script { 
                        //     zip archive: true, dir: '', overwrite: true, zipFile: "${env.BACKEND_DIR}-${env.BUILD_NUMBER}.zip" 
                        // }
                }
            }
        }
        
        stage("Frontend") {
            steps {  
                dir("$env.WORKSPACE/$env.FRONTEND_DIR") {
                    sh """
                        npm install &&                     
                        zip -r ${env.FRONTEND_DIR}-${env.BUILD_NUMBER}.zip .
                    """
                }
            }
        }

        stage("Infra") {
            steps {
                dir("$env.WORKSPACE/$env.INFRA_DIR") {
                    sh "zip -r ${env.INFRA_DIR}-${env.BUILD_NUMBER}.zip ."
                }
            }
        }

        // stage ('Vulnerability Check') {
        //     steps {
        //         sh "retire --path ${env.WORKSPACE}/${env.FRONTEND_DIR} --outputformat json --outputpath ${JENKINS_HOME}/reports/retirejs-report --exitwith 0"
        //     }
        // }

        stage("Upload to Artifactory") {
            steps {
                    dir("$env.WORKSPACE") {                        
                        withCredentials([usernamePassword(credentialsId: 'jfrog-cloud-userid', passwordVariable: 'SECRET', usernameVariable: 'USER')]) {
                            sh """
                                echo "Uploading ${env.FRONTEND_DIR} ${env.BACKEND_DIR} and ${INFRA_DIR} artifacts to jfrog"
                                curl -u $USER:$SECRET -T ${env.FRONTEND_DIR}/${env.FRONTEND_DIR}-${env.BUILD_NUMBER}.zip "${env.ARTIFACTORY_URL}/${env.ARTIFACTORY_DEPLOYMENT_REPO}/${env.FRONTEND_DIR}/${env.FRONTEND_DIR}-${env.BUILD_NUMBER}.zip" && 
                                curl -u $USER:$SECRET -T ${env.BACKEND_DIR}/${env.BACKEND_DIR}-${env.BUILD_NUMBER}.zip "${env.ARTIFACTORY_URL}/${env.ARTIFACTORY_DEPLOYMENT_REPO}/${env.BACKEND_DIR}/${env.BACKEND_DIR}-${env.BUILD_NUMBER}.zip" &&
                                curl -u $USER:$SECRET -T ${env.INFRA_DIR}/${env.INFRA_DIR}-${env.BUILD_NUMBER}.zip "${env.ARTIFACTORY_URL}/${env.ARTIFACTORY_DEPLOYMENT_REPO}/${env.INFRA_DIR}/${env.INFRA_DIR}-${env.BUILD_NUMBER}.zip" &&
                                echo "${env.FRONTEND_DIR} ${env.BACKEND_DIR} and ${INFRA_DIR} artifacts uploaded successfully"
                            """
                        }    
                    }
                }
        }

        stage("Download Artifact Package") {
            steps {
                    sh ""
                    dir("$env.WORKSPACE/exe") {                       
                        withCredentials([usernamePassword(credentialsId: 'jfrog-cloud-userid', passwordVariable: 'SECRET', usernameVariable: 'USER')]) {
                            sh """
                                echo "Downloading ${env.FRONTEND_DIR} ${env.BACKEND_DIR} and ${INFRA_DIR} artifacts to jfrog"
                                curl -u $USER:$SECRET "${env.ARTIFACTORY_URL}/${env.ARTIFACTORY_DEPLOYMENT_REPO}/${env.FRONTEND_DIR}/${env.FRONTEND_DIR}-${env.BUILD_NUMBER}.zip" -o ${env.FRONTEND_DIR}-${env.BUILD_NUMBER}.zip && 
                                curl -u $USER:$SECRET "${env.ARTIFACTORY_URL}/${env.ARTIFACTORY_DEPLOYMENT_REPO}/${env.BACKEND_DIR}/${env.BACKEND_DIR}-${env.BUILD_NUMBER}.zip" -o ${env.BACKEND_DIR}-${env.BUILD_NUMBER}.zip &&
                                curl -u $USER:$SECRET "${env.ARTIFACTORY_URL}/${env.ARTIFACTORY_DEPLOYMENT_REPO}/${env.INFRA_DIR}/${env.INFRA_DIR}-${env.BUILD_NUMBER}.zip"  -o ${env.INFRA_DIR}-${env.BUILD_NUMBER}.zip &&
                                echo "${env.FRONTEND_DIR} ${env.BACKEND_DIR} and ${INFRA_DIR} artifacts downloaded successfully"
                            """
                        }
                    } 
            }
        }

        stage("Terraform init") {
            steps {
                    dir("$env.WORKSPACE/exe") {   
                        script {
                            unzip dir: '', glob: '', zipFile: "infra-${env.BUILD_NUMBER}.zip"
                        }
                        sh "terraform init -no-color"                        
                    }
            }
        }

        stage("Terraform validate") {
            steps {
                    dir("$env.WORKSPACE/exe") {   
                        sh "terraform validate -no-color"                        
                    }
            }
        }

        stage("Pre-requisite") {
            steps {
                dir("$env.WORKSPACE/exe") {
                    sh """
                        terraform plan -no-color -target="azurerm_linux_web_app.toptal_backend_as"
                    """

                    timeout(time: 15, unit: "MINUTES") {
                        input message: 'Shall we go with terraform apply to start deploying the pre-requiste?', ok: 'Yes, please start deploying the pre-requisite'
                    }

                    sh """
                        terraform apply --auto-approve -no-color -target="azurerm_linux_web_app.toptal_backend_as"
                    """
                }
            }
        }
        // https://stackoverflow.com/questions/73489066/get-inbound-ip-adress-from-azurerm-windows-web-app-in-terraform
        stage("Terraform Plan"){
            steps {
                    dir("$env.WORKSPACE/exe") {   
                        sh "terraform plan -no-color"                        
                    }                
            }
        }

        stage("Ready to start the deployment? "){
            steps {
                    timeout(time: 15, unit: "MINUTES") {
                        input message: 'Shall we go with terraform apply to start the deployment?', ok: 'Yes, please start the deployment'
                    }
                    }                
            }
                
        stage("Terraform apply") {
            steps {
                    dir("$env.WORKSPACE/exe") {   
                        sh "terraform apply --auto-approve -no-color"
                    }
            }
        }
    }
}
